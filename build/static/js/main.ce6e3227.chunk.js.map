{"version":3,"sources":["components/ImportTable.js","App.js","index.js"],"names":["EXTENSION","ImportTable","useState","colDefs","setColDefs","data","setData","class","style","marginTop","type","onChange","e","file","target","files","reader","FileReader","onload","event","bstr","result","workBook","XLSX","read","workSheetName","SheetNames","workSheet","Sheets","fileData","utils","sheet_to_json","header","heads","map","head","title","field","splice","rows","forEach","row","rowData","element","index","push","convertToJson","parts","name","split","extension","length","includes","getExtension","alert","readAsBinaryString","onClick","value","columns","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAKMA,EAAY,CAAC,OAAS,MAAO,OACtBC,EAAc,WACvB,MAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,qBAAxB,mBAAOG,EAAP,KAAaC,EAAb,KA6DA,OACC,qBAAKC,MAAM,+BAAX,SACA,sBAAKA,MAAM,MAAMC,MAAO,CAAEC,UAAY,QAAtC,UACA,uBAAOC,KAAK,OAAQC,SA7CA,SAACC,GAClB,IAAMC,EAAQD,EAAEE,OAAOC,MAAM,GAEvBC,EAAQ,IAAIC,WAClBD,EAAOE,OAAO,SAACC,GACf,IAAMC,EAAOD,EAAML,OAAOO,OACpBC,EAAWC,IAAKC,KAAKJ,EAAM,CAAEV,KAAM,WAGrCe,EAAgBH,EAASI,WAAW,GACpCC,EAAYL,EAASM,OAAOH,GAE5BI,EAAWN,IAAKO,MAAMC,cAAcJ,EAAW,CAAEK,OAAQ,IACvDA,EAASH,EAAS,GAClBI,EAAQD,EAAOE,KAAI,SAAAC,GAAI,MAAK,CAC9BC,MAAOD,EACPE,MAAOF,MAEX/B,EAAW6B,GAGXJ,EAASS,OAAO,EAAE,GAClBhC,EAlCkB,SAAC0B,EAAQ3B,GAC3B,IAAMkC,EAAK,GASX,OAPAlC,EAAKmC,SAAQ,SAAAC,GACT,IAAIC,EAAQ,GACZD,EAAID,SAAQ,SAACG,EAAUC,GACnBF,EAAQV,EAAOY,IAAQD,KAE3BJ,EAAKM,KAAKH,MAEPH,EAwBCO,CAAcd,EAAQH,KAE3BhB,GA1Cc,SAACA,GACnB,IAAMkC,EAAQlC,EAAKmC,KAAKC,MAAM,KACxBC,EAAYH,EAAMA,EAAMI,OAAO,GACrC,OAAOnD,EAAUoD,SAASF,GAwClBG,CAAaxC,GAIZyC,MAAM,2CAHNtC,EAAOuC,mBAAmB1C,IAO9BP,EAAQ,IACRF,EAAW,QAYX,uBAAOM,KAAK,SAAS8C,QATX,SAAC5C,GACfN,EAAQ,IACRF,EAAW,KAOkCqD,MAAM,UAC/C,qBAAKlD,MAAM,MAAMC,MAAO,CAAEC,UAAY,UACtC,cAAC,IAAD,CACA2B,MAAO,QACP/B,KAAMA,EACNqD,QAASvD,UChENwD,MATf,WACE,OACE,qBAAKC,UAAU,MAAf,SAEE,cAAC,EAAD,OCJNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ce6e3227.chunk.js","sourcesContent":["import React,{ useState } from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport XLSX from 'xlsx'\r\nimport { height } from '@material-ui/system'\r\n\r\nconst EXTENSION = ['xlsx' , 'xls', 'csv']\r\nexport const ImportTable = () => {\r\n    const [colDefs, setColDefs] = useState()\r\n    const [data, setData] = useState()\r\n    const getExtension = (file) => {\r\n       const parts = file.name.split('.')\r\n       const extension = parts[parts.length-1]\r\n       return EXTENSION.includes(extension)\r\n    }\r\n\r\n    const convertToJson = (header, data) => {\r\n        const rows=[]\r\n\r\n        data.forEach(row =>{\r\n            let rowData={}\r\n            row.forEach((element , index)=> {\r\n                rowData[header[index]]=element\r\n            })\r\n            rows.push(rowData)\r\n        });\r\n        return(rows)\r\n    }\r\n    const importExcel  = (e) => {\r\n        const file = (e.target.files[0])\r\n\r\n        const reader =new FileReader()\r\n        reader.onload=(event) => {//parse data\r\n        const bstr = event.target.result\r\n        const workBook = XLSX.read(bstr, { type: \"binary\" })\r\n\r\n      //get first sheet\r\n      const workSheetName = workBook.SheetNames[0]\r\n      const workSheet = workBook.Sheets[workSheetName]\r\n      //convert to array\r\n      const fileData = XLSX.utils.sheet_to_json(workSheet, { header: 1 })\r\n        const header = fileData[0]\r\n        const heads = header.map(head => ({\r\n            title: head,\r\n            field: head\r\n        }))\r\n        setColDefs(heads)\r\n        //removing headers\r\n        \r\n        fileData.splice(0,1)\r\n        setData(convertToJson(header, fileData))\r\n        }\r\n        if(file){\r\n            if(getExtension(file)){\r\n                reader.readAsBinaryString(file)\r\n            }\r\n            else{\r\n                alert(\"Invalid Format... Restart with CSV,XLSX\")\r\n            }\r\n        }\r\n        else{\r\n            setData([])\r\n            setColDefs([])\r\n        }\r\n    }      \r\n    const resetData = (e) => {\r\n        setData([])\r\n        setColDefs([]) \r\n    }\r\n    \r\n    return (\r\n     <div class=\"h-100 row align-items-center\">\r\n     <div class=\"col\" style={{ marginTop : '50px'}}>\r\n     <input type=\"file\"  onChange={importExcel} />\r\n            <input type=\"button\" onClick={resetData} value=\"Reset\"/>\r\n            <div class=\"col\" style={{ marginTop : '50px'}}></div>\r\n            <MaterialTable \r\n            title={\"Table\"}\r\n            data={data}    \r\n            columns={colDefs}\r\n            />\r\n     </div>\r\n   </div>\r\n     \r\n    )\r\n}\r\n","import React from 'react'\nimport './App.css'\n\nimport { ImportTable } from './components/ImportTable'\n\nfunction App() {\n  return (\n    <div className='App'>\n      {/* <Pagination /> */}\n      <ImportTable />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}