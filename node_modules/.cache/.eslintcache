[{"C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\index.js":"1","C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\App.js":"2","C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\components\\Pagination.js":"3","C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\components\\FilterTable.js":"4","C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\components\\columns.js":"5","C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\components\\ColumnFilter.js":"6","C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\components\\GlobalFilter.js":"7","C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\components\\ImportTable.js":"8"},{"size":219,"mtime":1629183708954,"results":"9","hashOfConfig":"10"},{"size":244,"mtime":1629449395489,"results":"11","hashOfConfig":"10"},{"size":3960,"mtime":1629363185462,"results":"12","hashOfConfig":"13"},{"size":2439,"mtime":1629203788292,"results":"14","hashOfConfig":"13"},{"size":1659,"mtime":1629203723701,"results":"15","hashOfConfig":"13"},{"size":388,"mtime":1629292958444,"results":"16","hashOfConfig":"13"},{"size":569,"mtime":1629204200458,"results":"17","hashOfConfig":"13"},{"size":2523,"mtime":1629450824104,"results":"18","hashOfConfig":"10"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s70k0",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},"8nxzcb",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\index.js",[],"C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\App.js",[],"C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\components\\Pagination.js",["40"],"import React, { useMemo } from 'react'\r\nimport { useTable , useGlobalFilter, useFilters  , usePagination} from 'react-table'\r\nimport MOCK_DATA from './MOCK_DATA.json'\r\nimport { COLUMNS } from './columns'\r\nimport './table.css'\r\n// import { GlobalFilter } from './GlobalFilter'\r\nimport { ColumnFilter } from './ColumnFilter'\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\n\r\n\r\n\r\nexport const Pagination = () => {\r\n  \r\n  const columns = useMemo(() => COLUMNS, [])\r\n  const data = useMemo(() => MOCK_DATA, [])\r\n\r\n  const defaultColumn = useMemo(() => {\r\n      return{\r\n      Filter: ColumnFilter\r\n    }\r\n  }, [])\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    canNextPage,\r\n    canPreviousPage,\r\n    pageOptions,\r\n    gotoPage,\r\n    pageCount,\r\n    setPageSize,\r\n    prepareRow,\r\n    state,\r\n  } = useTable({\r\n    columns,\r\n    data,\r\n    defaultColumn\r\n  }, useFilters, useGlobalFilter , usePagination)\r\n\r\n  const {pageIndex, pageSize} = state\r\n\r\n  return (\r\n    <>\r\n   \r\n         \r\n    \r\n  \r\n\r\n   <div className=\"container mt-4\">\r\n      \r\n      \r\n   <div class=\"container m-4\">\r\n  <div class=\"row\">\r\n    <div class=\"col-sm\">\r\n       <select value={pageSize} onChange={e => setPageSize(Number(e.target.value))}>\r\n              {\r\n              [10, 25, 50, 100].map(pageSize => (\r\n              <option key={pageSize} value={pageSize}> Show {pageSize} Rows </option>\r\n              ))\r\n            }\r\n      </select>\r\n    </div>\r\n    <div class=\"col-sm\">\r\n     <h3> <small className=\"text-muted\">\r\n</small> </h3>\r\n    </div>\r\n    <div class=\"col-sm\">\r\n      <span className=\"goto\">\r\n           Go to pages :  {''}\r\n            <input type='number' defaultValue={pageIndex +1} onChange={e => {\r\n               const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0 \r\n               gotoPage(pageNumber)\r\n            }} style={{\r\n              width: 75,\r\n            }}/>\r\n          </span>\r\n    </div>\r\n  </div>\r\n</div>\r\n      \r\n     \r\n      \r\n      \r\n      \r\n      \r\n      <div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col table-data\">\r\n    <table className=\"table\" {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>{column.render('Header')}\r\n                <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </th>\r\n              ))}\r\n            </tr> \r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map(row => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    \r\n    <div class=\"w-100\"></div>\r\n    \r\n<div class=\"row\">\r\n    <div class=\"col\">\r\n    <div className=\"pagination\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'}</button>\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>Previous</button>\r\n        <span>\r\n        page {''}\r\n        <strong>\r\n          {pageIndex + 1} of {pageOptions.length}\r\n        </strong>\r\n      </span>\r\n      \r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>Next</button>\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>{'>>'}</button>\r\n      </div>\r\n      \r\n      </div>\r\n      </div>\r\n      <div class=\"col mt-2\">\r\n      <CSVLink data={data} filename=\"data.csv\"><button type=\"button\" class=\"btn btn-outline-success  btn-sm\">Download CSV</button></CSVLink>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n      \r\n      \r\n     \r\n    </>\r\n  )\r\n}",["41","42"],"C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\components\\FilterTable.js",[],"C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\components\\columns.js",["43"],"import { ColumnFilter } from \"./ColumnFilter\"\r\n\r\nexport const COLUMNS = [\r\n    {\r\n        Header : 'Id',\r\n        accessor : 'id',\r\n        Footer : 'Id',\r\n        disableFilters : true\r\n    },\r\n    {\r\n        Header : 'First Name',\r\n        accessor : 'first_name',\r\n        Footer : 'First Name',\r\n    },\r\n    {\r\n        Header : 'Last Name',\r\n        accessor : 'last_name',\r\n        Footer : 'Last Name',\r\n    },\r\n    {\r\n        Header : 'Email',\r\n        accessor : 'email',\r\n        Footer : 'email',\r\n    },\r\n    {\r\n        Header  : 'Car',\r\n        accessor : 'car',\r\n        Footer : 'Car',\r\n    }\r\n    \r\n]\r\n\r\nexport const GROUPED_CoLUMNS = [\r\n    {\r\n        Header : 'Id',\r\n        accessor : 'id',\r\n        Footer : 'Id'\r\n    },\r\n    {\r\n        Header : 'Name',\r\n        Footer : 'Name',\r\n        columns : [\r\n            {\r\n                Header : 'First Name',\r\n                accessor : 'first_name',\r\n                Footer : 'First Name'\r\n            },\r\n            {\r\n                Header : 'Last Name',\r\n                accessor : 'last_name',\r\n                Footer : 'Last Name'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        Header : 'Info',\r\n        Footer : 'Info',\r\n        columns : [\r\n            {\r\n                Header : 'Email',\r\n                accessor : 'email',\r\n                Footer : 'email'\r\n            },\r\n            {\r\n                Header  : 'Car',\r\n                accessor : 'car',\r\n                Footer : 'Car'\r\n            },\r\n            {\r\n                Header : 'Date of Birth',\r\n                accessor : 'dob',\r\n                Footer : 'Date of Birth'\r\n            } \r\n        ]\r\n    }\r\n]","C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\components\\ColumnFilter.js",[],"C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\components\\GlobalFilter.js",["44","45"],"import React , { useState } from 'react'\r\nimport { useAsyncDebounce } from 'react-table'\r\nexport const GlobalFilter = ({filter , setFilter}) => {\r\n    const [value, setValue] = useState(filter)\r\n\r\n    const onChange = useAsyncDebounce(value =>{\r\n        setFilter (value || undefined)\r\n    }, 1000)\r\n     return (\r\n        <span>\r\n            Search : { '' }\r\n            <input value = {filter || ''}\r\n            onChange = {(e) =>  {\r\n                setFilter(e.target.value)\r\n                onChange(e.target.value)\r\n            }} />\r\n        </span>\r\n    )\r\n}\r\n","C:\\Users\\Zafar Abbas\\Desktop\\React\\data-table\\src\\components\\ImportTable.js",["46"],"import React,{ useState } from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport XLSX from 'xlsx'\r\nimport { height } from '@material-ui/system'\r\n\r\nconst EXTENSION = ['xlsx' , 'xls', 'csv']\r\nexport const ImportTable = () => {\r\n    const [colDefs, setColDefs] = useState()\r\n    const [data, setData] = useState()\r\n    const getExtension = (file) => {\r\n       const parts = file.name.split('.')\r\n       const extension = parts[parts.length-1]\r\n       return EXTENSION.includes(extension)\r\n    }\r\n\r\n    const convertToJson = (header, data) => {\r\n        const rows=[]\r\n\r\n        data.forEach(row =>{\r\n            let rowData={}\r\n            row.forEach((element , index)=> {\r\n                rowData[header[index]]=element\r\n            })\r\n            rows.push(rowData)\r\n        });\r\n        return(rows)\r\n    }\r\n    const importExcel  = (e) => {\r\n        const file = (e.target.files[0])\r\n\r\n        const reader =new FileReader()\r\n        reader.onload=(event) => {//parse data\r\n        const bstr = event.target.result\r\n        const workBook = XLSX.read(bstr, { type: \"binary\" })\r\n\r\n      //get first sheet\r\n      const workSheetName = workBook.SheetNames[0]\r\n      const workSheet = workBook.Sheets[workSheetName]\r\n      //convert to array\r\n      const fileData = XLSX.utils.sheet_to_json(workSheet, { header: 1 })\r\n        const header = fileData[0]\r\n        const heads = header.map(head => ({\r\n            title: head,\r\n            field: head\r\n        }))\r\n        setColDefs(heads)\r\n        //removing headers\r\n        \r\n        fileData.splice(0,1)\r\n        setData(convertToJson(header, fileData))\r\n        }\r\n        if(file){\r\n            if(getExtension(file)){\r\n                reader.readAsBinaryString(file)\r\n            }\r\n            else{\r\n                alert(\"Invalid Format... Restart with CSV,XLSX\")\r\n            }\r\n        }\r\n        else{\r\n            setData([])\r\n            setColDefs([])\r\n        }\r\n    }      \r\n    const resetData = (e) => {\r\n        setData([])\r\n        setColDefs([]) \r\n    }\r\n    \r\n    return (\r\n     <div class=\"h-100 row align-items-center\">\r\n     <div class=\"col\" style={{ marginTop : '50px'}}>\r\n     <input type=\"file\"  onChange={importExcel} />\r\n            <input type=\"button\" onClick={resetData} value=\"Reset\"/>\r\n            <div class=\"col\" style={{ marginTop : '50px'}}></div>\r\n            <MaterialTable \r\n            title={\"Table\"}\r\n            data={data}    \r\n            columns={colDefs}\r\n            />\r\n     </div>\r\n   </div>\r\n     \r\n    )\r\n}\r\n",{"ruleId":"47","severity":1,"message":"48","line":8,"column":19,"nodeType":"49","messageId":"50","endLine":8,"endColumn":30},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"47","severity":1,"message":"55","line":1,"column":10,"nodeType":"49","messageId":"50","endLine":1,"endColumn":22},{"ruleId":"47","severity":1,"message":"56","line":4,"column":12,"nodeType":"49","messageId":"50","endLine":4,"endColumn":17},{"ruleId":"47","severity":1,"message":"57","line":4,"column":19,"nodeType":"49","messageId":"50","endLine":4,"endColumn":27},{"ruleId":"47","severity":1,"message":"58","line":4,"column":10,"nodeType":"49","messageId":"50","endLine":4,"endColumn":16},"no-unused-vars","'CSVDownload' is defined but never used.","Identifier","unusedVar","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"'ColumnFilter' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'height' is defined but never used.","no-global-assign","no-unsafe-negation"]