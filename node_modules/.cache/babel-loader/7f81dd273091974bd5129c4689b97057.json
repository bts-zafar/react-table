{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { useTable, useGlobalFilter, useFilters, usePagination } from 'react-table';\nimport MOCK_DATA from './MOCK_DATA.json';\nimport { COLUMNS } from './columns';\nimport './table.css'; // import { GlobalFilter } from './GlobalFilter'\n\nimport { ColumnFilter } from './ColumnFilter';\nimport { CSVLink, CSVDownload } from \"react-csv\";\nexport const Pagination = () => {\n  _s();\n\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => MOCK_DATA, []); // const defaultColumn = useMemo(() => {\n  //     return{\n  //     Filter: ColumnFilter\n  //   }\n  // }, [])\n  // const {\n  //   getTableProps,\n  //   getTableBodyProps,\n  //   headerGroups,\n  //   page,\n  //   nextPage,\n  //   previousPage,\n  //   canNextPage,\n  //   canPreviousPage,\n  //   pageOptions,\n  //   gotoPage,\n  //   pageCount,\n  //   setPageSize,\n  //   prepareRow,\n  //   state,\n  // } = useTable({\n  //   columns,\n  //   data,\n  //   defaultColumn\n  // }, useFilters, useGlobalFilter , usePagination)\n  // const {pageIndex, pageSize} = state\n  // return (\n  //   <>\n  //   <CSVLink data={data}>Download me</CSVLink>;\n  //     <div className = \"web_table\">\n  //     <select value={pageSize} onChange={e => setPageSize(Number(e.target.value))}>\n  //             {\n  //             [10, 25, 50, 100].map(pageSize => (\n  //             <option key={pageSize} value={pageSize}> Show {pageSize} Rows </option>\n  //             ))\n  //           }\n  //           </select>\n  //     <span className=\"goto\">\n  //          Go to pages :  {''}\n  //           <input type='number' defaultValue={pageIndex +1} onChange={e => {\n  //              const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0 \n  //              gotoPage(pageNumber)\n  //           }} style={{\n  //             width: 75,\n  //           }}/>\n  //         </span>\n  //     <table {...getTableProps()}>\n  //       <thead>\n  //         {headerGroups.map(headerGroup => (\n  //           <tr {...headerGroup.getHeaderGroupProps()}>\n  //             {headerGroup.headers.map(column => (\n  //               <th {...column.getHeaderProps()}>{column.render('Header')}\n  //               <div>{column.canFilter ? column.render('Filter') : null}</div>\n  //               </th>\n  //             ))}\n  //           </tr> \n  //         ))}\n  //       </thead>\n  //       <tbody {...getTableBodyProps()}>\n  //         {page.map(row => {\n  //           prepareRow(row)\n  //           return (\n  //             <tr {...row.getRowProps()}>\n  //               {row.cells.map(cell => {\n  //                 return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n  //               })}\n  //             </tr>\n  //           )\n  //         })}\n  //       </tbody>\n  //     </table>\n  //     <div className=\"pagination\">\n  //       <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'}</button>\n  //       <button onClick={() => previousPage()} disabled={!canPreviousPage}>Previous</button>\n  //       <span>\n  //       page {''}\n  //       <strong>\n  //         {pageIndex + 1} of {pageOptions.length}\n  //       </strong>\n  //     </span>\n  //       <button onClick={() => nextPage()} disabled={!canNextPage}>Next</button>\n  //       <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>{'>>'}</button>\n  //     </div>\n  //     </div>\n  //   </>\n  // )\n};\n\n_s(Pagination, \"7zObr1GywQUmP9L3sfy/4IDluAk=\");\n\n_c = Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"sources":["C:/Users/Zafar Abbas/Desktop/data-table/src/components/Pagination.js"],"names":["React","useMemo","useTable","useGlobalFilter","useFilters","usePagination","MOCK_DATA","COLUMNS","ColumnFilter","CSVLink","CSVDownload","Pagination","columns","data"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,QAAT,EAAoBC,eAApB,EAAqCC,UAArC,EAAmDC,aAAnD,QAAuE,aAAvE;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAO,aAAP,C,CACA;;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,WAArC;AAGA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAE9B,QAAMC,OAAO,GAAGX,OAAO,CAAC,MAAMM,OAAP,EAAgB,EAAhB,CAAvB;AACA,QAAMM,IAAI,GAAGZ,OAAO,CAAC,MAAMK,SAAP,EAAkB,EAAlB,CAApB,CAH8B,CAK9B;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAjGM;;GAAMK,U;;KAAAA,U","sourcesContent":["import React, { useMemo } from 'react'\r\nimport { useTable , useGlobalFilter, useFilters  , usePagination} from 'react-table'\r\nimport MOCK_DATA from './MOCK_DATA.json'\r\nimport { COLUMNS } from './columns'\r\nimport './table.css'\r\n// import { GlobalFilter } from './GlobalFilter'\r\nimport { ColumnFilter } from './ColumnFilter'\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\n\r\n\r\nexport const Pagination = () => {\r\n  \r\n  const columns = useMemo(() => COLUMNS, [])\r\n  const data = useMemo(() => MOCK_DATA, [])\r\n\r\n  // const defaultColumn = useMemo(() => {\r\n  //     return{\r\n  //     Filter: ColumnFilter\r\n  //   }\r\n  // }, [])\r\n\r\n  // const {\r\n  //   getTableProps,\r\n  //   getTableBodyProps,\r\n  //   headerGroups,\r\n  //   page,\r\n  //   nextPage,\r\n  //   previousPage,\r\n  //   canNextPage,\r\n  //   canPreviousPage,\r\n  //   pageOptions,\r\n  //   gotoPage,\r\n  //   pageCount,\r\n  //   setPageSize,\r\n  //   prepareRow,\r\n  //   state,\r\n  // } = useTable({\r\n  //   columns,\r\n  //   data,\r\n  //   defaultColumn\r\n  // }, useFilters, useGlobalFilter , usePagination)\r\n\r\n  // const {pageIndex, pageSize} = state\r\n\r\n  // return (\r\n  //   <>\r\n   \r\n           \r\n  //   <CSVLink data={data}>Download me</CSVLink>;\r\n\r\n  //     <div className = \"web_table\">\r\n  //     <select value={pageSize} onChange={e => setPageSize(Number(e.target.value))}>\r\n  //             {\r\n  //             [10, 25, 50, 100].map(pageSize => (\r\n  //             <option key={pageSize} value={pageSize}> Show {pageSize} Rows </option>\r\n  //             ))\r\n  //           }\r\n  //           </select>\r\n  //     <span className=\"goto\">\r\n  //          Go to pages :  {''}\r\n  //           <input type='number' defaultValue={pageIndex +1} onChange={e => {\r\n  //              const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0 \r\n  //              gotoPage(pageNumber)\r\n  //           }} style={{\r\n  //             width: 75,\r\n  //           }}/>\r\n  //         </span>\r\n  //     <table {...getTableProps()}>\r\n  //       <thead>\r\n  //         {headerGroups.map(headerGroup => (\r\n  //           <tr {...headerGroup.getHeaderGroupProps()}>\r\n  //             {headerGroup.headers.map(column => (\r\n  //               <th {...column.getHeaderProps()}>{column.render('Header')}\r\n  //               <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n  //               </th>\r\n  //             ))}\r\n  //           </tr> \r\n  //         ))}\r\n  //       </thead>\r\n  //       <tbody {...getTableBodyProps()}>\r\n  //         {page.map(row => {\r\n  //           prepareRow(row)\r\n  //           return (\r\n  //             <tr {...row.getRowProps()}>\r\n  //               {row.cells.map(cell => {\r\n  //                 return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n  //               })}\r\n  //             </tr>\r\n  //           )\r\n  //         })}\r\n  //       </tbody>\r\n  //     </table>\r\n  //     <div className=\"pagination\">\r\n  //       <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'}</button>\r\n  //       <button onClick={() => previousPage()} disabled={!canPreviousPage}>Previous</button>\r\n  //       <span>\r\n  //       page {''}\r\n  //       <strong>\r\n  //         {pageIndex + 1} of {pageOptions.length}\r\n  //       </strong>\r\n  //     </span>\r\n  //       <button onClick={() => nextPage()} disabled={!canNextPage}>Next</button>\r\n  //       <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>{'>>'}</button>\r\n  //     </div>\r\n  //     </div>\r\n  //   </>\r\n  // )\r\n}"]},"metadata":{},"sourceType":"module"}