{"ast":null,"code":"import _slicedToArray from\"C:/Users/Zafar Abbas/Desktop/React/data-table/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import MaterialTable from'material-table';import XLSX from'xlsx';import{height}from'@material-ui/system';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var EXTENSION=['xlsx','xls','csv'];export var ImportTable=function ImportTable(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),colDefs=_useState2[0],setColDefs=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),data=_useState4[0],setData=_useState4[1];var getExtension=function getExtension(file){var parts=file.name.split('.');var extension=parts[parts.length-1];return EXTENSION.includes(extension);};var convertToJson=function convertToJson(header,data){var rows=[];data.forEach(function(row){var rowData={};row.forEach(function(element,index){rowData[header[index]]=element;});rows.push(rowData);});return rows;};var importExcel=function importExcel(e){var file=e.target.files[0];var reader=new FileReader();reader.onload=function(event){//parse data\nvar bstr=event.target.result;var workBook=XLSX.read(bstr,{type:\"binary\"});//get first sheet\nvar workSheetName=workBook.SheetNames[0];var workSheet=workBook.Sheets[workSheetName];//convert to array\nvar fileData=XLSX.utils.sheet_to_json(workSheet,{header:1});var header=fileData[0];var heads=header.map(function(head){return{title:head,field:head};});setColDefs(heads);//removing headers\nfileData.splice(0,1);setData(convertToJson(header,fileData));};if(file){if(getExtension(file)){reader.readAsBinaryString(file);}else{alert(\"Invalid Format... Restart with CSV,XLSX\");}}else{setData([]);setColDefs([]);}};var resetData=function resetData(e){setData([]);setColDefs([]);};return/*#__PURE__*/_jsx(\"div\",{class:\"h-100 row align-items-center\",children:/*#__PURE__*/_jsxs(\"div\",{class:\"col\",style:{marginTop:'50px'},children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:importExcel}),/*#__PURE__*/_jsx(\"input\",{type:\"button\",onClick:resetData,value:\"Reset\"}),/*#__PURE__*/_jsx(\"div\",{class:\"col\",style:{marginTop:'50px'}}),/*#__PURE__*/_jsx(MaterialTable,{title:\"Table\",data:data,columns:colDefs})]})});};","map":{"version":3,"sources":["C:/Users/Zafar Abbas/Desktop/React/data-table/src/components/ImportTable.js"],"names":["React","useState","MaterialTable","XLSX","height","EXTENSION","ImportTable","colDefs","setColDefs","data","setData","getExtension","file","parts","name","split","extension","length","includes","convertToJson","header","rows","forEach","row","rowData","element","index","push","importExcel","e","target","files","reader","FileReader","onload","event","bstr","result","workBook","read","type","workSheetName","SheetNames","workSheet","Sheets","fileData","utils","sheet_to_json","heads","map","head","title","field","splice","readAsBinaryString","alert","resetData","marginTop"],"mappings":"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","sourcesContent":["import React,{ useState } from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport XLSX from 'xlsx'\r\nimport { height } from '@material-ui/system'\r\n\r\nconst EXTENSION = ['xlsx' , 'xls', 'csv']\r\nexport const ImportTable = () => {\r\n    const [colDefs, setColDefs] = useState()\r\n    const [data, setData] = useState()\r\n    const getExtension = (file) => {\r\n       const parts = file.name.split('.')\r\n       const extension = parts[parts.length-1]\r\n       return EXTENSION.includes(extension)\r\n    }\r\n\r\n    const convertToJson = (header, data) => {\r\n        const rows=[]\r\n\r\n        data.forEach(row =>{\r\n            let rowData={}\r\n            row.forEach((element , index)=> {\r\n                rowData[header[index]]=element\r\n            })\r\n            rows.push(rowData)\r\n        });\r\n        return(rows)\r\n    }\r\n    const importExcel  = (e) => {\r\n        const file = (e.target.files[0])\r\n\r\n        const reader =new FileReader()\r\n        reader.onload=(event) => {//parse data\r\n        const bstr = event.target.result\r\n        const workBook = XLSX.read(bstr, { type: \"binary\" })\r\n\r\n      //get first sheet\r\n      const workSheetName = workBook.SheetNames[0]\r\n      const workSheet = workBook.Sheets[workSheetName]\r\n      //convert to array\r\n      const fileData = XLSX.utils.sheet_to_json(workSheet, { header: 1 })\r\n        const header = fileData[0]\r\n        const heads = header.map(head => ({\r\n            title: head,\r\n            field: head\r\n        }))\r\n        setColDefs(heads)\r\n        //removing headers\r\n        \r\n        fileData.splice(0,1)\r\n        setData(convertToJson(header, fileData))\r\n        }\r\n        if(file){\r\n            if(getExtension(file)){\r\n                reader.readAsBinaryString(file)\r\n            }\r\n            else{\r\n                alert(\"Invalid Format... Restart with CSV,XLSX\")\r\n            }\r\n        }\r\n        else{\r\n            setData([])\r\n            setColDefs([])\r\n        }\r\n    }      \r\n    const resetData = (e) => {\r\n        setData([])\r\n        setColDefs([]) \r\n    }\r\n    \r\n    return (\r\n     <div class=\"h-100 row align-items-center\">\r\n     <div class=\"col\" style={{ marginTop : '50px'}}>\r\n     <input type=\"file\"  onChange={importExcel} />\r\n            <input type=\"button\" onClick={resetData} value=\"Reset\"/>\r\n            <div class=\"col\" style={{ marginTop : '50px'}}></div>\r\n            <MaterialTable \r\n            title={\"Table\"}\r\n            data={data}    \r\n            columns={colDefs}\r\n            />\r\n     </div>\r\n   </div>\r\n     \r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}