{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zafar Abbas\\\\Desktop\\\\React\\\\data-table\\\\src\\\\components\\\\ImportTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport MaterialTable from 'material-table';\nimport XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EXTENSIONS = ['xlsx', 'xls', 'csv'];\n\nfunction App() {\n  _s();\n\n  const [colDefs, setColDefs] = useState();\n  const [data, setData] = useState();\n\n  const getExention = file => {\n    const parts = file.name.split('.');\n    const extension = parts[parts.length - 1];\n    return EXTENSIONS.includes(extension); // return boolean\n  };\n\n  const convertToJson = (headers, data) => {\n    const rows = [];\n    data.forEach(row => {\n      let rowData = {};\n      row.forEach((element, index) => {\n        rowData[headers[index]] = element;\n      });\n      rows.push(rowData);\n    });\n    return rows;\n  };\n\n  const importExcel = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = event => {\n      //parse data\n      const bstr = event.target.result;\n      const workBook = XLSX.read(bstr, {\n        type: \"binary\"\n      }); //get first sheet\n\n      const workSheetName = workBook.SheetNames[0];\n      const workSheet = workBook.Sheets[workSheetName]; //convert to array\n\n      const fileData = XLSX.utils.sheet_to_json(workSheet, {\n        header: 1\n      }); // console.log(fileData)\n\n      const headers = fileData[0];\n      const heads = headers.map(head => ({\n        title: head,\n        field: head\n      }));\n      setColDefs(heads); //removing header\n\n      fileData.splice(0, 1);\n      setData(convertToJson(headers, fileData));\n    };\n\n    if (file) {\n      if (getExention(file)) {\n        reader.readAsBinaryString(file);\n      } else {\n        alert(\"Invalid file input, Select Excel, CSV file\");\n      }\n    } else {\n      setData([]);\n      setColDefs([]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      align: \"center\",\n      children: \"React-App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      align: \"center\",\n      children: \"Import Data from Excel, CSV in Material Table\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: importExcel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MaterialTable, {\n      title: \"Olympic Data\",\n      data: data,\n      columns: colDefs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"IrjxtztShS2uLtBxBuJnko+gh18=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Zafar Abbas/Desktop/React/data-table/src/components/ImportTable.js"],"names":["React","useState","MaterialTable","XLSX","EXTENSIONS","App","colDefs","setColDefs","data","setData","getExention","file","parts","name","split","extension","length","includes","convertToJson","headers","rows","forEach","row","rowData","element","index","push","importExcel","e","target","files","reader","FileReader","onload","event","bstr","result","workBook","read","type","workSheetName","SheetNames","workSheet","Sheets","fileData","utils","sheet_to_json","header","heads","map","head","title","field","splice","readAsBinaryString","alert"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport MaterialTable from 'material-table'\r\nimport XLSX from 'xlsx'\r\n\r\nconst EXTENSIONS = ['xlsx', 'xls', 'csv']\r\nfunction App() {\r\n  const [colDefs, setColDefs] = useState()\r\n  const [data, setData] = useState()\r\n\r\n  const getExention = (file) => {\r\n    const parts = file.name.split('.')\r\n    const extension = parts[parts.length - 1]\r\n    return EXTENSIONS.includes(extension) // return boolean\r\n  }\r\n\r\n  const convertToJson = (headers, data) => {\r\n    const rows = []\r\n    data.forEach(row => {\r\n      let rowData = {}\r\n      row.forEach((element, index) => {\r\n        rowData[headers[index]] = element\r\n      })\r\n      rows.push(rowData)\r\n\r\n    });\r\n    return rows\r\n  }\r\n\r\n  const importExcel = (e) => {\r\n    const file = e.target.files[0]\r\n\r\n    const reader = new FileReader()\r\n    reader.onload = (event) => {\r\n      //parse data\r\n\r\n      const bstr = event.target.result\r\n      const workBook = XLSX.read(bstr, { type: \"binary\" })\r\n\r\n      //get first sheet\r\n      const workSheetName = workBook.SheetNames[0]\r\n      const workSheet = workBook.Sheets[workSheetName]\r\n      //convert to array\r\n      const fileData = XLSX.utils.sheet_to_json(workSheet, { header: 1 })\r\n      // console.log(fileData)\r\n      const headers = fileData[0]\r\n      const heads = headers.map(head => ({ title: head, field: head }))\r\n      setColDefs(heads)\r\n\r\n      //removing header\r\n      fileData.splice(0, 1)\r\n\r\n\r\n      setData(convertToJson(headers, fileData))\r\n    }\r\n\r\n    if (file) {\r\n      if (getExention(file)) {\r\n        reader.readAsBinaryString(file)\r\n      }\r\n      else {\r\n        alert(\"Invalid file input, Select Excel, CSV file\")\r\n      }\r\n    } else {\r\n      setData([])\r\n      setColDefs([])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 align=\"center\">React-App</h1>\r\n      <h4 align='center'>Import Data from Excel, CSV in Material Table</h4>\r\n      <input type=\"file\" onChange={importExcel} />\r\n      <MaterialTable title=\"Olympic Data\" data={data} columns={colDefs} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}