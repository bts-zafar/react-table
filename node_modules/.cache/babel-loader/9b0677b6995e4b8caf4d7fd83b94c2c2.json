{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zafar Abbas\\\\Desktop\\\\React\\\\data-table\\\\src\\\\components\\\\ImportTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport MaterialTable from 'material-table';\nimport XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ImportTable = () => {\n  _s();\n\n  const [colDefs, setColDefs] = useState();\n  const [data, setData] = useState();\n\n  const getExtension = file => {\n    console.log(file);\n  };\n\n  const convertToJson = (header, data) => {\n    const rows = [];\n    data.forEach(row => {\n      let rowData = {};\n      row.forEach((element, index) => {\n        rowData[header[index]] = element;\n      });\n      rows.push(rowData);\n    });\n    return rows;\n  };\n\n  const importExcel = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = event => {\n      //parse data\n      const bstr = event.target.result;\n      const workBook = XLSX.read(bstr, {\n        type: \"binary\"\n      }); //get first sheet\n\n      const workSheetName = workBook.SheetNames[0];\n      const workSheet = workBook.Sheets[workSheetName]; //convert to array\n\n      const fileData = XLSX.utils.sheet_to_json(workSheet, {\n        header: 1\n      });\n      const header = fileData[0];\n      const heads = header.map(head => ({\n        title: head,\n        field: head\n      }));\n      setColDefs(heads); //removing headers\n\n      fileData.splice(0, 1);\n      setData(convertToJson(header, fileData));\n    };\n\n    if (getExtension(file)) {\n      reader.readAsBinaryString(file);\n    } else {\n      alert(\"Invalid Format... Restart with CSV,XLSX\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: importExcel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MaterialTable, {\n      title: \"Table\",\n      data: data,\n      columns: colDefs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 8\n  }, this);\n};\n\n_s(ImportTable, \"IrjxtztShS2uLtBxBuJnko+gh18=\");\n\n_c = ImportTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImportTable\");","map":{"version":3,"sources":["C:/Users/Zafar Abbas/Desktop/React/data-table/src/components/ImportTable.js"],"names":["React","useState","MaterialTable","XLSX","ImportTable","colDefs","setColDefs","data","setData","getExtension","file","console","log","convertToJson","header","rows","forEach","row","rowData","element","index","push","importExcel","e","target","files","reader","FileReader","onload","event","bstr","result","workBook","read","type","workSheetName","SheetNames","workSheet","Sheets","fileData","utils","sheet_to_json","heads","map","head","title","field","splice","readAsBinaryString","alert"],"mappings":"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","sourcesContent":["import React,{ useState } from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport XLSX from 'xlsx'\r\n\r\nexport const ImportTable = () => {\r\n    const [colDefs, setColDefs] = useState()\r\n    const [data, setData] = useState()\r\n    const getExtension = (file) => {\r\n        console.log(file)\r\n    }\r\n\r\n    const convertToJson = (header, data) => {\r\n        const rows=[]\r\n\r\n        data.forEach(row =>{\r\n            let rowData={}\r\n            row.forEach((element , index)=> {\r\n                rowData[header[index]]=element\r\n            })\r\n            rows.push(rowData)\r\n        });\r\n        return(rows)\r\n    }\r\n    const importExcel  = (e) => {\r\n        const file = (e.target.files[0])\r\n\r\n        const reader =new FileReader()\r\n        reader.onload=(event) => {//parse data\r\n        const bstr = event.target.result\r\n        const workBook = XLSX.read(bstr, { type: \"binary\" })\r\n\r\n      //get first sheet\r\n      const workSheetName = workBook.SheetNames[0]\r\n      const workSheet = workBook.Sheets[workSheetName]\r\n      //convert to array\r\n      const fileData = XLSX.utils.sheet_to_json(workSheet, { header: 1 })\r\n        const header = fileData[0]\r\n        const heads = header.map(head => ({\r\n            title: head,\r\n            field: head\r\n        }))\r\n        setColDefs(heads)\r\n        //removing headers\r\n        \r\n        fileData.splice(0,1)\r\n        setData(convertToJson(header, fileData))\r\n        }\r\n        if(getExtension(file)){\r\n            reader.readAsBinaryString(file)\r\n        }\r\n        else{\r\n            alert(\"Invalid Format... Restart with CSV,XLSX\")\r\n        }\r\n    }      \r\n    \r\n    \r\n    return (\r\n       <div>\r\n            <input type=\"file\" onChange={importExcel}/>\r\n            <MaterialTable \r\n            title={\"Table\"}\r\n            data={data}    \r\n            columns={colDefs}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}